{"version":3,"sources":["serviceWorker.js","TimerHeader/components/TimerHeader.jsx","timerStates.js","TimerDisplay/components/DisplayTimer.jsx","TimerButton/components/TimerButton.jsx","TimerConfig/components/TimerConfig.jsx","Timer/components/Timer.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","TimerHeader","className","NOT_SET","leftPad","val","TimerDisplay","props","timerState","title","width","height","src","frameborder","allow","allowfullscreen","currentTime","get","TimerButton","getButton","bind","this","timerStates","onClick","startTimer","stopTimer","Component","TimerConfig","handelChange","ev","newBaseTime","baseTime","target","id","subtract","add","parseInt","value","setBaseTime","htmlFor","type","defaultValue","onChange","Timer","state","moment","duration","timer","reduceTimer","setState","setInterval","clearInterval","newTime","completeTimer","App","global","jQuery","require","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d349b6a7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst TimerHeader = () => (\r\n  <div className=\"row\">\r\n    <div className=\"col-12\">\r\n      <h2 className=\"text-center\">Pomo Timer!</h2>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default TimerHeader;\r\n","export const NOT_SET = 0;\r\nexport const RUNNING = 1;\r\nexport const COMPLETE = 2;\r\n","import React from \"react\";\r\nimport * as timerStates from \"../../timerStates\";\r\n\r\nconst leftPad = val => {\r\n  if (val < 10) return `0${val}`;\r\n\r\n  return `${val}`;\r\n};\r\n\r\nconst TimerDisplay = props => (\r\n  <div>\r\n    <div className=\"row mx-auto\">\r\n      {props.timerState === timerStates.COMPLETE && (\r\n        <div className=\"embed-responsive embed-responsive-16by9\">\r\n          <iframe\r\n            className=\"embed-responsive-item\"\r\n            title=\"youtube embeded player\"\r\n            width=\"560\"\r\n            height=\"315\"\r\n            src=\"https://www.youtube.com/embed/Lg_PBZQky8s?autoplay=1\"\r\n            frameborder=\"0\"\r\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope;\r\n          picture-in-picture\"\r\n            allowfullscreen\r\n          ></iframe>\r\n        </div>\r\n      )}\r\n    </div>\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <h2 className=\"text-center\">\r\n          {`${leftPad(props.currentTime.get(\"hours\"))}:${leftPad(\r\n            props.currentTime.get(\"minutes\")\r\n          )}:\r\n        ${leftPad(props.currentTime.get(\"seconds\"))}`}\r\n        </h2>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default TimerDisplay;\r\n","import React, { Component } from \"react\";\r\nimport * as timerStates from \"../../timerStates\";\r\n\r\nclass TimerButton extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.getButton = this.getButton.bind(this);\r\n  }\r\n\r\n  getButton() {\r\n    // start\r\n    if (this.props.timerState === timerStates.NOT_SET)\r\n      return (\r\n        <button\r\n          className=\"btn btn-success mx-auto\"\r\n          onClick={this.props.startTimer}\r\n        >\r\n          Start\r\n        </button>\r\n      );\r\n\r\n    //stop\r\n    if (this.props.timerState === timerStates.RUNNING)\r\n      return (\r\n        <button\r\n          className=\"btn btn-danger mx-auto\"\r\n          onClick={this.props.stopTimer}\r\n        >\r\n          Stop\r\n        </button>\r\n      );\r\n\r\n    //complete\r\n\r\n    if (this.props.timerState === timerStates.COMPLETE)\r\n      return (\r\n        <button className=\"btn btn-info mx-auto\" onClick={this.props.stopTimer}>\r\n          Reset\r\n        </button>\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"row\">{this.getButton()}</div>;\r\n  }\r\n}\r\n\r\nexport default TimerButton;\r\n","import React, { Component } from \"react\";\r\n\r\nclass TimerConfig extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handelChange = this.handelChange.bind(this);\r\n  }\r\n\r\n  handelChange(ev) {\r\n    const newBaseTime = this.props.baseTime;\r\n\r\n    if (ev.target.id === \"hours\")\r\n      newBaseTime\r\n        .subtract(newBaseTime.get(\"hours\"), \"hours\")\r\n        .add(parseInt(ev.target.value), \"hours\");\r\n    if (ev.target.id === \"minutes\")\r\n      newBaseTime\r\n        .subtract(newBaseTime.get(\"minutes\"), \"minutes\")\r\n        .add(parseInt(ev.target.value), \"minutes\");\r\n    if (ev.target.id === \"seconds\")\r\n      newBaseTime\r\n        .subtract(newBaseTime.get(\"seconds\"), \"seconds\")\r\n        .add(parseInt(ev.target.value), \"seconds\");\r\n\r\n    this.props.setBaseTime(newBaseTime);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-12\">\r\n          <h2 className=\"text-primary\">Set Timer</h2>\r\n        </div>\r\n\r\n        {/* form Container */}\r\n        <div className=\"container-fluid\">\r\n          <form>\r\n            {/* hours */}\r\n            <div className=\"form-group\">\r\n              <div className=\"row mb-3 mt-3\">\r\n                <div className=\"col-sm-3\">\r\n                  <label htmlFor=\"hours\">Hours</label>\r\n                </div>\r\n                <div className=\"col-sm-9\">\r\n                  <input\r\n                    id=\"hours\"\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    defaultValue={this.props.baseTime.get(\"hours\")}\r\n                    onChange={this.handelChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* minutes */}\r\n            <div className=\"form-group\">\r\n              <div className=\"row mb-3\">\r\n                <div className=\"col-sm-3\">\r\n                  <label htmlFor=\"minutes\">Minutes</label>\r\n                </div>\r\n                <div className=\"col-sm-9\">\r\n                  <input\r\n                    id=\"minutes\"\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    defaultValue={this.props.baseTime.get(\"minutes\")}\r\n                    onChange={this.handelChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* seconds */}\r\n            <div className=\"form-group\">\r\n              <div className=\"row mb-3\">\r\n                <div className=\"col-sm-3\">\r\n                  <label htmlFor=\"seconds\">Seconds</label>\r\n                </div>\r\n                <div className=\"col-sm-9\">\r\n                  <input\r\n                    id=\"seconds\"\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    defaultValue={this.props.baseTime.get(\"seconds\")}\r\n                    onChange={this.handelChange}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        {/* /form container */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimerConfig;\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport TimerHeader from \"../../TimerHeader/components/TimerHeader\";\r\nimport TimerDisplay from \"../../TimerDisplay/components/DisplayTimer\";\r\nimport TimerButton from \"../../TimerButton/components/TimerButton\";\r\nimport TimerConfig from \"../../TimerConfig/components/TimerConfig\";\r\nimport * as timerStates from \"../../timerStates\";\r\n\r\nclass Timer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentTime: moment.duration(25, \"minutes\"),\r\n      baseTime: moment.duration(25, \"minutes\"),\r\n      timerState: timerStates.NOT_SET,\r\n      timer: null\r\n    };\r\n\r\n    this.setBaseTime = this.setBaseTime.bind(this);\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n    this.reduceTimer = this.reduceTimer.bind(this);\r\n  }\r\n\r\n  setBaseTime(newBaseTime) {\r\n    this.setState({\r\n      baseTime: newBaseTime,\r\n      currentTime: newBaseTime\r\n    });\r\n  }\r\n\r\n  startTimer() {\r\n    this.setState({\r\n      timerState: timerStates.RUNNING,\r\n      timer: setInterval(this.reduceTimer, 1000)\r\n    });\r\n  }\r\n\r\n  stopTimer() {\r\n    if (this.state.timer) {\r\n      clearInterval(this.state.timer);\r\n    }\r\n\r\n    this.setState({\r\n      timerState: timerStates.NOT_SET,\r\n      timer: null,\r\n      currentTime: moment.duration(this.state.baseTime)\r\n    });\r\n  }\r\n\r\n  reduceTimer() {\r\n    if (\r\n      this.state.currentTime.get(\"hours\") === 0 &&\r\n      this.state.currentTime.get(\"minutes\") === 0 &&\r\n      this.state.currentTime.get(\"seconds\") === 0\r\n    ) {\r\n      this.completeTimer();\r\n      return;\r\n    }\r\n\r\n    const newTime = moment.duration(this.state.currentTime);\r\n    newTime.subtract(1, \"second\");\r\n\r\n    this.setState({\r\n      currentTime: newTime\r\n    });\r\n  }\r\n\r\n  completeTimer() {\r\n    if (this.state.timer) {\r\n      clearInterval(this.state.timer);\r\n    }\r\n\r\n    this.setState({\r\n      timerState: timerStates.COMPLETE,\r\n      timer: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        {/* header */}\r\n        <TimerHeader />\r\n        {/* timer text */}\r\n        <TimerDisplay\r\n          currentTime={this.state.currentTime}\r\n          timerState={this.state.timerState}\r\n        />\r\n        {/* button */}\r\n        <TimerButton\r\n          startTimer={this.startTimer}\r\n          stopTimer={this.stopTimer}\r\n          timerState={this.state.timerState}\r\n        />\r\n        {/* Timer configuration settings*/}\r\n        {this.state.timerState !== timerStates.RUNNING && (\r\n          <TimerConfig\r\n            baseTime={this.state.baseTime}\r\n            setBaseTime={this.setBaseTime}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Timer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Timer from \"./Timer/components/Timer\";\n\nfunction App() {\n  return (\n    <div className=\"card shadow-lg app-content mx-auto\">\n      <div className=\"card-body\">\n        <Timer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nglobal.jQuery = require('jquery');\nrequire('bootstrap');\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}